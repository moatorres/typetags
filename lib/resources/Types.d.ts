declare type NestedTypes =
  | 'Array.Iterator'
  | 'Map.Iterator'
  | 'Set.Iterator'
  | 'String.Iterator'
  | 'Intl.Collator'
  | 'Intl.DateTimeFormat'
  | 'Intl.ListFormat'
  | 'Intl.Locale'
  | 'Intl.NumberFormat'
  | 'Intl.PluralRules'
  | 'Intl.RelativeTimeFormat'
  | 'WebAssembly.Module'
  | 'WebAssembly.Global'
  | 'WebAssembly.Instance'
  | 'WebAssembly.Memory'
  | 'WebAssembly.Table'
  | 'WebAssembly.CompileError'
  | 'WebAssembly.LinkError'
  | 'WebAssembly.RuntimeError'

declare type TypesNames =
  | 'AbortController'
  | 'AbortSignal'
  | 'AggregateError'
  | 'Arguments'
  | 'Array'
  | 'ArrayBuffer'
  | 'AsyncFunction'
  | 'Atomics'
  | 'BigInt'
  | 'BigInt64Array'
  | 'BigUint64Array'
  | 'Boolean'
  | 'Console'
  | 'DataView'
  | 'Date'
  | 'Error'
  | 'EvalError'
  | 'FinalizationRegistry'
  | 'Float32Array'
  | 'Float64Array'
  | 'Function'
  | 'Generator'
  | 'GeneratorFunction'
  | 'GlobalThis'
  | 'Global'
  | 'Infinity'
  | 'Int8Array'
  | 'Int16Array'
  | 'Int32Array'
  | 'Intl'
  | 'JSON'
  | 'Map'
  | 'Math'
  | 'NaN'
  | 'Null'
  | 'Number'
  | 'Object'
  | 'Process'
  | 'Promise'
  | 'RangeError'
  | 'ReferenceError'
  | 'RegExp'
  | 'Reflect'
  | 'Set'
  | 'SharedArrayBuffer'
  | 'String'
  | 'Symbol'
  | 'SyntaxError'
  | 'TextDecoder'
  | 'TextEncoder'
  | 'TypeError'
  | 'Uint8Array'
  | 'Uint8ClampedArray'
  | 'Uint16Array'
  | 'Uint32Array'
  | 'Undefined'
  | 'URIError'
  | 'URL'
  | 'URLSearchParams'
  | 'WeakMap'
  | 'WeakRef'
  | 'WeakSet'
  | 'WebAssembly'
  | 'Window'
  | 'Worker'

declare interface ITypes {
  init(): void
  initializers(): { [key in TypesNames | NestedTypes]: any }
  list(): Array<string, any>
  missing(): Array<string, any>
  available(): number
  unavailable(): number
  all(): Array<string, any>
  get(name: TypesNames | NestedTypes): any
  count(): number
}

export declare const Types: ITypes
