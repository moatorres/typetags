import {
  TypeTags,
  IntlEnum,
  WasmEnum,
  BigIntEnum,
  NaNEnum,
  InfinityEnum,
} from './type-tags'

const tags = Object.values(TypeTags)
const toString = (v) => Object.prototype.toString.call(v)
const isFunction = (v) => typeof v === 'function'
const predicate = (name) => (v) => v === TypeTags[name]
const TypedArrayRegex = new RegExp(/^\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\]$/) // prettier-ignore
const IteratorRegex = new RegExp(/^\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped|Array|String|Map|WeakMap|Set|WeakSet) Iterator\]$/) // prettier-ignore

export const hasToStringMethod = (v) => !!v.toString && isFunction(v.toString)
export const isDefaultTag = (str) => tags.includes(str)
export const hasDefaultTag = (v) => isFunction(v.toString) && isDefaultTag(v.toString()) && isDefaultTag(toString(v)) // prettier-ignore

export const isAbortControllerTag = predicate('AbortController')
export const isAbortSignalTag = predicate('AbortSignal')
export const isAggregateErrorTag = predicate('AggregateError')
export const isArgumentsTag = predicate('Arguments')
export const isArrayTag = predicate('Array')
export const isArrayBufferTag = predicate('ArrayBuffer')
export const isAsyncFunctionTag = predicate('AsyncFunction')
export const isAtomicsTag = predicate('Atomics')
export const isBigIntTag = (str) => BigIntEnum.includes(str)
export const isBigInt64ArrayTag = predicate('BigInt64Array')
export const isBigUint64ArrayTag = predicate('BigUint64Array')
export const isBooleanTag = predicate('Boolean')
export const isConsoleTag = predicate('Console')
export const isDataViewTag = predicate('DataView')
export const isDateTag = predicate('Date')
export const isErrorTag = predicate('Error')
export const isEvalErrorTag = predicate('EvalError')
export const isFinalizationRegistryTag = predicate('FinalizationRegistry')
export const isFloat32ArrayTag = predicate('Float32Array')
export const isFloat64ArrayTag = predicate('Float64Array')
export const isFunctionTag = predicate('Function')
export const isGeneratorTag = predicate('Generator')
export const isGeneratorFunctionTag = predicate('GeneratorFunction')
export const isGlobalThisTag = predicate('GlobalThis')
export const isInfinityTag = (str) => InfinityEnum.includes(str)
export const isInt8ArrayTag = predicate('Int8Array')
export const isInt16ArrayTag = predicate('Int16Array')
export const isInt32ArrayTag = predicate('Int32Array')
export const isIntlTag = (str) => IntlEnum.includes(str)
export const isIntlCollatorTag = predicate('Intl.Collator')
export const isIntlDateTimeFormatTag = predicate('Intl.DateTimeFormat')
export const isIntlListFormatTag = predicate('Intl.ListFormat')
export const isIntlLocaleTag = predicate('Intl.Locale')
export const isIntlNumberFormatTag = predicate('Intl.NumberFormat')
export const isIntlPluralRulesTag = predicate('Intl.PluralRules')
export const isIntlRelativeTimeFormatTag = predicate('Intl.RelativeTimeFormat')
export const isIteratorTag = (v) => IteratorRegex.test(v)
export const isJsonTag = predicate('JSON')
export const isMapTag = predicate('Map')
export const isMapIteratorTag = predicate('Map.Iterator')
export const isMathTag = predicate('Math')
export const isNaNTag = (str) => NaNEnum.includes(str)
export const isNullTag = predicate('Null')
export const isNumberTag = predicate('Number')
export const isObjectTag = predicate('Object')
export const isProcessTag = predicate('Process')
export const isPromiseTag = predicate('Promise')
export const isRangeErrorTag = predicate('RangeError')
export const isReferenceErrorTag = predicate('ReferenceError')
export const isReflectTag = predicate('Reflect')
export const isRegExpTag = predicate('RegExp')
export const isSetTag = predicate('Set')
export const isSetIteratorTag = predicate('Set.Iterator')
export const isSharedArrayBufferTag = predicate('SharedArrayBuffer')
export const isStringTag = predicate('String')
export const isSymbolTag = predicate('Symbol')
export const isSyntaxErrorTag = predicate('SyntaxError')
export const isTypeErrorTag = predicate('TypeError')
export const isTypedArrayTag = (v) => TypedArrayRegex.test(v)
export const isUint8ArrayTag = predicate('Uint8Array')
export const isUint8ClampedArrayTag = predicate('Uint8ClampedArray')
export const isUint16ArrayTag = predicate('Uint16Array')
export const isUint32ArrayTag = predicate('Uint32Array')
export const isUndefinedTag = predicate('Undefined')
export const isURIErrorTag = predicate('URIError')
export const isWeakMapTag = predicate('WeakMap')
export const isWeakRefTag = predicate('WeakRef')
export const isWeakSetTag = predicate('WeakSet')
export const isWasmTag = (str) => WasmEnum.includes(str)
export const isWasmCompileErrorTag = predicate('WebAssembly.CompileError')
export const isWasmGlobalTag = predicate('WebAssembly.Global')
export const isWasmInstanceTag = predicate('WebAssembly.Instance')
export const isWasmLinkErrorTag = predicate('WebAssembly.LinkError')
export const isWasmMemoryTag = predicate('WebAssembly.Memory')
export const isWasmModuleTag = predicate('WebAssembly.Module')
export const isWasmRuntimeErrorTag = predicate('WebAssembly.RuntimeError')
export const isWasmTableTag = predicate('WebAssembly.Table')
export const isWindowTag = predicate('Window')
export const isWorkerTag = predicate('Worker')
